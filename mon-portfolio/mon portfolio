Rapport

structure :

src/
├── app/
│   ├── page.tsx           # Page d'accueil
│   ├── layout.tsx         # Layout principal
│   ├── about/
│   │   └── page.tsx       # Page "À propos"
│   ├── projects/
│   │   ├── page.tsx       # Liste des projets
│   │   └── [slug]/
│   │       └── page.tsx   # Page détaillée d'un projet
│   ├── skills/
│   │   └── page.tsx       # Compétences techniques
│   ├── contact/
│   │   └── page.tsx       # Formulaire de contact
│   └── globals.css
├── components/            # Composants réutilisables
│   ├── ui/                # Composants d'interface
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   │   └── Navbar.tsx
│   ├── sections/          # Sections principales
│   │   ├── Hero.tsx       # Section d'introduction
│   │   ├── ProjectCard.tsx
│   │   └── ContactForm.tsx
├── lib/                   # Fonctions utilitaires
│   └── data.ts            # Données des projets/compétences
└── types/                 # Types TypeScript
    └── index.ts           # Définitions des interfaces
    
        
    
______________________________________________________

ANCIEN HERO :

"use client"

import Link from 'next/link';
import { motion } from 'framer-motion'; // Si vous installez framer-motion

const Hero = () => {
  return (
    <motion.section 
      className="min-h-screen flex flex-col justify-center"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="max-w-4xl mx-auto px-4 py-20 text-center md:text-left">
        <h1 className="text-4xl md:text-6xl font-bold mb-6">
          Salut, je suis <span className="text-blue-600">Votre Nom</span>
        </h1>
        <h2 className="text-2xl md:text-3xl mb-8 text-gray-600 dark:text-gray-300">
          Développeur Web Full Stack
        </h2>
        <p className="text-lg mb-10 max-w-2xl mx-auto md:mx-0">
          Je crée des applications web modernes et performantes avec React, Next.js et TypeScript.
        </p>
        <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4 justify-center md:justify-start">
          <Link href="/projects" className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
            Voir mes projets
          </Link>
          <Link href="/contact" className="px-6 py-3 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition">
            Me contacter
          </Link>
        </div>
      </div>
    </motion.section>
  );
};

export default Hero;



___________________________________________________________

ajoutons maintenant le mode sombre et claire et aussi une possibilité de passer du francais à l'anglais (toute les pages)



// src/types/index.ts
export interface Project {
  id: string;
  title: string;
  description: string;
  image: string;
  technologies: string[];
  githubUrl?: string;
  demoUrl?: string;
  featured: boolean;
}

export interface Skill {
  name: string;
  icon: string;
  category: 'frontend' | 'backend' | 'tools' | 'other';
  proficiency: number; // 1-5
}




Navbar (src/components/ui/Navbar.tsx)

"use client"
import Link from 'next/link';
import { useState } from 'react';

const Navbar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  return (
    <nav className="fixed top-0 w-full bg-white dark:bg-gray-900 shadow-sm z-10">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <Link href="/" className="font-bold text-xl">VotreNom</Link>
          
          {/* Menu desktop */}
          <div className="hidden md:flex space-x-8">
            <Link href="/" className="hover:text-blue-600 transition">Accueil</Link>
            <Link href="/projects" className="hover:text-blue-600 transition">Projets</Link>
            <Link href="/skills" className="hover:text-blue-600 transition">Compétences</Link>
            <Link href="/about" className="hover:text-blue-600 transition">À propos</Link>
            <Link href="/contact" className="hover:text-blue-600 transition">Contact</Link>
          </div>
          
          {/* Menu mobile - toggle button */}
          <button 
            className="md:hidden"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            Menu
          </button>
        </div>
        
        {/* Menu mobile - dropdown */}
        {isMenuOpen && (
          <div className="md:hidden py-3 pb-4">
            <div className="flex flex-col space-y-3">
              <Link href="/" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">Accueil</Link>
              <Link href="/projects" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">Projets</Link>
              <Link href="/skills" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">Compétences</Link>
              <Link href="/about" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">À propos</Link>
              <Link href="/contact" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">Contact</Link>
            </div>
          </div>
        )}
      </div>
    </nav>
  );
};

export default Navbar;


Section Hero (src/components/sections/Hero.tsx)

"use client"

import { useEffect, useRef } from 'react';
import Link from 'next/link';
import Image from 'next/image';

const Hero = () => {
  const imageRef = useRef<HTMLDivElement>(null);

  // Gestion du survol pour l'assombrissement progressif
  const handleMouseEnter = () => {
    if (imageRef.current) {
      imageRef.current.style.transition = '1.5s';
      imageRef.current.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
    }
  };

  const handleMouseLeave = () => {
    if (imageRef.current) {
      imageRef.current.style.transition = '1.5s';
      imageRef.current.style.backgroundColor = 'transparent';
    }
  };

  // Animations au chargement
  useEffect(() => {
    const animateElements = () => {
      const smallLogo = document.querySelector('.small-logo');
      const title = document.querySelector('.hero-title');
      const subtitle = document.querySelector('.hero-subtitle');
      const paragraph = document.querySelector('.hero-paragraph');
      const buttons = document.querySelector('.hero-buttons');
      const heroImage = document.querySelector('.hero-image-container');

      const elements = [smallLogo, title, subtitle, paragraph, buttons, heroImage];
      
      elements.forEach((el, index) => {
        if (el) {
          setTimeout(() => {
            el.classList.add('animate-in');
          }, 300 * (index + 1));
        }
      });
    };

    animateElements();
  }, []);

  return (
    <section className="min-h-screen pt-20 flex flex-col items-center">

      {/* Petite image en haut à gauche */}
      <div className="small-logo absolute top-0 left-0 opacity-0 transform translate-y-10 transition-all duration-700">
        <Image
          src="/images/drapeau.png"
          alt="Logo"
          width={220}
          height={60}
          priority
        />
      </div>

      <div className="w-full max-w-7xl flex flex-col-reverse md:flex-row px-4 py-10">
        {/* Texte et boutons - à gauche en desktop, en bas en mobile */}
        <div className="md:w-1/2 flex flex-col justify-center mt-8 md:mt-0 md:pr-8">
          <h1 className="hero-title opacity-0 text-4xl md:text-5xl lg:text-6xl font-bold mb-4 text-blue-600 transform translate-y-10 transition-all duration-700">
            Salut, je suis <span className="block text-white">Wilfried KONAN</span>
          </h1>
          
          <h2 className="hero-subtitle opacity-0 text-2xl md:text-3xl mb-6 text-gray-700 dark:text-gray-300 transform translate-y-10 transition-all duration-700 delay-300">
            Développeur Web Full Stack
          </h2>
          
          <p className="hero-paragraph opacity-0 text-lg mb-8 text-gray-600 transform translate-y-10 transition-all duration-700 delay-500">
            Je crée des applications web modernes et performantes avec React, Next.js et TypeScript.
            Passionné par le développement web, je m'efforce toujours d'apprendre de nouvelles technologies
            et de créer des expériences utilisateur exceptionnelles.
          </p>
          
          <div className="hero-buttons opacity-0 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 transform translate-y-10 transition-all duration-700 delay-700">
            <Link href="/projects" className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition text-center">
              Voir mes projets
            </Link>
            <Link href="/contact" className="px-6 py-3 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition text-center">
              Me contacter
            </Link>
          </div>
        </div>
        
        {/* Image - à droite en desktop, en haut en mobile */}
        <div className="md:w-1/2 flex justify-center md:justify-end items-center">
          <div 
            className="hero-image-container relative w-full h-100 sm:h-100 md:h-96 lg:h-[700px] opacity-0 transform translate-y-10 transition-all duration-700 overflow-hidden rounded-xl"
            ref={imageRef}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
          >
            <Image
              src="/images/developer.jpeg" 
              alt="Votre profil"
              fill
              className="object-cover rounded-xl"
              priority
            />
            <div className="absolute inset-0 bg-transparent transition-colors duration-1500 ease-in-out" />
          </div>
        </div>
      </div>
      
      {/* CSS pour les animations */}
      <style jsx global>{`
        .animate-in {
          opacity: 1 !important;
          transform: translateY(0) !important;
        }
      `}</style>
    </section>
  );
};

export default Hero;


Carte de projet (src/components/sections/ProjectCard.tsx)

import Image from 'next/image';
import Link from 'next/link';
import { Project } from '@/types';

interface ProjectCardProps {
  project: Project;
}

const ProjectCard = ({ project }: ProjectCardProps) => {
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition">
      <div className="relative h-48 w-full">
        <Image 
          src={project.image} 
          alt={project.title}
          fill
          className="object-cover"
          // sizes="(max-width: 768px) 100vw, (max-width: 1200px) 500vw, 33vw"
        />
      </div>
      <div className="p-6">
        <h3 className="font-bold text-xl mb-2">{project.title}</h3>
        <p className="text-gray-600 dark:text-gray-300 mb-4">
          {project.description}
        </p>
        <div className="flex flex-wrap gap-2 mb-4">
          {project.technologies.map((tech) => (
            <span 
              key={tech}
              className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-sm"
            >
              {tech}
            </span>
          ))}
        </div>
        <div className="flex space-x-3">
          {project.githubUrl && (
            <a 
              href={project.githubUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-900 transition"
            >
              GitHub
            </a>
          )}
          {project.demoUrl && (
            <a 
              href={project.demoUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
            >
              Démo
            </a>
          )}
          <Link 
            href={`/projects/${project.id}`}
            className="px-4 py-2 border border-blue-600 text-blue-600 rounded-md hover:bg-blue-50 transition ml-auto"
          >
            Détails
          </Link>
        </div>
      </div>
    </div>
  );
};


Page d'accueil (src/app/page.tsx)

import Hero from '@/components/sections/Hero';
import ProjectCard from '@/components/sections/ProjectCard';
import { Project } from '@/types';

// Simulez des données (à remplacer par vos propres données)
const featuredProjects: Project[] = [
  {
    id: 'project-1',
    title: 'Application E-commerce',
    description: 'Une plateforme e-commerce complète avec panier, paiement et gestion des commandes',
    image: '/images/projects/ecommerce.jpg',
    technologies: ['React', 'Next.js', 'TypeScript', 'Tailwind CSS'],
    githubUrl: 'https://github.com/username/ecommerce',
    demoUrl: 'https://ecommerce-demo.com',
    featured: true
  },
  // Autres projets...
];

export default function Home() {
  return (
    <main>
      <Hero />
      
      <section className="py-20 bg-gray-50 dark:bg-gray-900">
        <div className="max-w-7xl mx-auto px-4">
          <h2 className="text-3xl font-bold mb-12 text-center">Projets en vedette</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {featuredProjects.map(project => (
              <ProjectCard key={project.id} project={project} />
            ))}
          </div>
          <div className="text-center mt-12">
            <a 
              href="/projects" 
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
            >
              Voir tous les projets
            </a>
          </div>
        </div>
      </section>
      
      {/* Autres sections comme Skills, Contact rapide, etc. */}
    </main>
  );
}

Page des projets (src/app/projects/page.tsx)

import ProjectCard from '@/components/sections/ProjectCard';
import { Project } from '@/types';
import { useState } from 'react';

// Simulez des données (à remplacer par vos propres données)
const allProjects: Project[] = [
  // Projets...
];

export default function ProjectsPage() {
  return (
    <div className="py-20 max-w-7xl mx-auto px-4">
      <h1 className="text-4xl font-bold mb-8">Mes projets</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {allProjects.map(project => (
          <ProjectCard key={project.id} project={project} />
        ))}
      </div>
    </div>
  );
}


export default ProjectCard;


Mise en place du layout principal

// src/app/layout.tsx
import './globals.css';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import Navbar from '@/components/ui/Navbar';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Votre Nom | Développeur Web',
  description: 'Portfolio de développement web et projets personnels',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="fr">
      <body className={inter.className}>
        <Navbar />
        <main className="pt-16">
          {children}
        </main>
        <footer className="bg-gray-800 text-white py-8">
          <div className="max-w-7xl mx-auto px-4 text-center">
            <p>© {new Date().getFullYear()} Votre Nom. Tous droits réservés.</p>
          </div>
        </footer>
      </body>
    </html>
  );
}


faisons maintenant :   

Page de détail de projet 

Page des compétences:  À développer avec visualisation de mes skills ( tailwindcss, laravel,vuejs,flask,nestjs,nextjs,react,mongodb,mysql,sqlite3,tkinter,...)(language: html, css,php,js,python,sql,...)  

 Page À propos : À créer avec mon parcours professionnel  

 Formulaire de contact: À implémenter dans la page contact . 

tres beau design avec animation au chargement des pages et dégradé sur les pages.    possibilité de choisir mode sombre ou mode claire




______________________________________




voici les informations de mon projet precedent, portfolio dev avec React et Next.js dans combiné :
Structure des sections de votre portfolio Next.js avec TypeScript apres installation :
src/
├── app/
│   ├── page.tsx           # Page d'accueil
│   ├── layout.tsx         # Layout principal
│   ├── about/
│   │   └── page.tsx       # Page "À propos"
│   ├── projects/
│   │   ├── page.tsx       # Liste des projets
│   │   └── [slug]/
│   │       └── page.tsx   # Page détaillée d'un projet
│   ├── skills/
│   │   └── page.tsx       # Compétences techniques
│   ├── contact/
│   │   └── page.tsx       # Formulaire de contact
│   └── globals.css
├── components/            # Composants réutilisables
│   ├── ui/                # Composants d'interface
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   │   └── Navbar.tsx
│   ├── sections/          # Sections principales
│   │   ├── Hero.tsx       # Section d'introduction
│   │   ├── ProjectCard.tsx
│   │   └── ContactForm.tsx
├── lib/                   # Fonctions utilitaires
│   └── data.ts            # Données des projets/compétences
└── types/                 # Types TypeScript
    └── index.ts           # Définitions des interfaces
# Création de la structure de base mkdir -p src/app/about mkdir -p src/app/projects/\[slug\] mkdir -p src/app/skills mkdir -p src/app/contact mkdir -p src/components/ui mkdir -p src/components/sections mkdir -p src/lib mkdir -p src/types mkdir -p public/images/projects # Fichiers de base de l'application touch src/app/page.tsx touch src/app/layout.tsx touch src/app/globals.css touch src/app/about/page.tsx touch src/app/projects/page.tsx touch src/app/projects/\[slug\]/page.tsx touch src/app/skills/page.tsx touch src/app/contact/page.tsx # Composants UI touch src/components/ui/Navbar.tsx touch src/components/ui/Button.tsx touch src/components/ui/Card.tsx # Sections principales touch src/components/sections/Hero.tsx touch src/components/sections/ProjectCard.tsx touch src/components/sections/ContactForm.tsx # Utilitaires et types touch src/lib/data.ts touch src/types/index.ts # Fichiers pour les images (placeholders) touch public/images/projects/.gitkeep

voici les codes présents dans les fichiers. Analyse et enregistre pour mieu continuer le projet de mon portfolio


// src/types/index.ts
export interface Project {
  id: string;
  title: string;
  description: string;
  image: string;
  technologies: string[];
  githubUrl?: string;
  demoUrl?: string;
  featured: boolean;
}

export interface Skill {
  name: string;
  icon: string;
  category: 'frontend' | 'backend' | 'tools' | 'other';
  proficiency: number; // 1-5
}




Navbar (src/components/ui/Navbar.tsx)

"use client"
import Link from 'next/link';
import { useState } from 'react';

const Navbar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  return (
    <nav className="fixed top-0 w-full bg-white dark:bg-gray-900 shadow-sm z-10">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <Link href="/" className="font-bold text-xl">VotreNom</Link>
          
          {/* Menu desktop */}
          <div className="hidden md:flex space-x-8">
            <Link href="/" className="hover:text-blue-600 transition">Accueil</Link>
            <Link href="/projects" className="hover:text-blue-600 transition">Projets</Link>
            <Link href="/skills" className="hover:text-blue-600 transition">Compétences</Link>
            <Link href="/about" className="hover:text-blue-600 transition">À propos</Link>
            <Link href="/contact" className="hover:text-blue-600 transition">Contact</Link>
          </div>
          
          {/* Menu mobile - toggle button */}
          <button 
            className="md:hidden"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            Menu
          </button>
        </div>
        
        {/* Menu mobile - dropdown */}
        {isMenuOpen && (
          <div className="md:hidden py-3 pb-4">
            <div className="flex flex-col space-y-3">
              <Link href="/" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">Accueil</Link>
              <Link href="/projects" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">Projets</Link>
              <Link href="/skills" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">Compétences</Link>
              <Link href="/about" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">À propos</Link>
              <Link href="/contact" className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded">Contact</Link>
            </div>
          </div>
        )}
      </div>
    </nav>
  );
};

export default Navbar;


Section Hero (src/components/sections/Hero.tsx)

"use client"

import { useEffect, useRef } from 'react';
import Link from 'next/link';
import Image from 'next/image';

const Hero = () => {
  const imageRef = useRef<HTMLDivElement>(null);

  // Gestion du survol pour l'assombrissement progressif
  const handleMouseEnter = () => {
    if (imageRef.current) {
      imageRef.current.style.transition = '1.5s';
      imageRef.current.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
    }
  };

  const handleMouseLeave = () => {
    if (imageRef.current) {
      imageRef.current.style.transition = '1.5s';
      imageRef.current.style.backgroundColor = 'transparent';
    }
  };

  // Animations au chargement
  useEffect(() => {
    const animateElements = () => {
      const smallLogo = document.querySelector('.small-logo');
      const title = document.querySelector('.hero-title');
      const subtitle = document.querySelector('.hero-subtitle');
      const paragraph = document.querySelector('.hero-paragraph');
      const buttons = document.querySelector('.hero-buttons');
      const heroImage = document.querySelector('.hero-image-container');

      const elements = [smallLogo, title, subtitle, paragraph, buttons, heroImage];
      
      elements.forEach((el, index) => {
        if (el) {
          setTimeout(() => {
            el.classList.add('animate-in');
          }, 300 * (index + 1));
        }
      });
    };

    animateElements();
  }, []);

  return (
    <section className="min-h-screen pt-20 flex flex-col items-center">

      {/* Petite image en haut à gauche */}
      <div className="small-logo absolute top-0 left-0 opacity-0 transform translate-y-10 transition-all duration-700">
        <Image
          src="/images/drapeau.png"
          alt="Logo"
          width={220}
          height={60}
          priority
        />
      </div>

      <div className="w-full max-w-7xl flex flex-col-reverse md:flex-row px-4 py-10">
        {/* Texte et boutons - à gauche en desktop, en bas en mobile */}
        <div className="md:w-1/2 flex flex-col justify-center mt-8 md:mt-0 md:pr-8">
          <h1 className="hero-title opacity-0 text-4xl md:text-5xl lg:text-6xl font-bold mb-4 text-blue-600 transform translate-y-10 transition-all duration-700">
            Salut, je suis <span className="block text-white">Wilfried KONAN</span>
          </h1>
          
          <h2 className="hero-subtitle opacity-0 text-2xl md:text-3xl mb-6 text-gray-700 dark:text-gray-300 transform translate-y-10 transition-all duration-700 delay-300">
            Développeur Web Full Stack
          </h2>
          
          <p className="hero-paragraph opacity-0 text-lg mb-8 text-gray-600 transform translate-y-10 transition-all duration-700 delay-500">
            Je crée des applications web modernes et performantes avec React, Next.js et TypeScript.
            Passionné par le développement web, je m'efforce toujours d'apprendre de nouvelles technologies
            et de créer des expériences utilisateur exceptionnelles.
          </p>
          
          <div className="hero-buttons opacity-0 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 transform translate-y-10 transition-all duration-700 delay-700">
            <Link href="/projects" className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition text-center">
              Voir mes projets
            </Link>
            <Link href="/contact" className="px-6 py-3 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition text-center">
              Me contacter
            </Link>
          </div>
        </div>
        
        {/* Image - à droite en desktop, en haut en mobile */}
        <div className="md:w-1/2 flex justify-center md:justify-end items-center">
          <div 
            className="hero-image-container relative w-full h-100 sm:h-100 md:h-96 lg:h-[700px] opacity-0 transform translate-y-10 transition-all duration-700 overflow-hidden rounded-xl"
            ref={imageRef}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
          >
            <Image
              src="/images/developer.jpeg" 
              alt="Votre profil"
              fill
              className="object-cover rounded-xl"
              priority
            />
            <div className="absolute inset-0 bg-transparent transition-colors duration-1500 ease-in-out" />
          </div>
        </div>
      </div>
      
      {/* CSS pour les animations */}
      <style jsx global>{`
        .animate-in {
          opacity: 1 !important;
          transform: translateY(0) !important;
        }
      `}</style>
    </section>
  );
};

export default Hero;


Carte de projet (src/components/sections/ProjectCard.tsx)

import Image from 'next/image';
import Link from 'next/link';
import { Project } from '@/types';

interface ProjectCardProps {
  project: Project;
}

const ProjectCard = ({ project }: ProjectCardProps) => {
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition">
      <div className="relative h-48 w-full">
        <Image 
          src={project.image} 
          alt={project.title}
          fill
          className="object-cover"
          // sizes="(max-width: 768px) 100vw, (max-width: 1200px) 500vw, 33vw"
        />
      </div>
      <div className="p-6">
        <h3 className="font-bold text-xl mb-2">{project.title}</h3>
        <p className="text-gray-600 dark:text-gray-300 mb-4">
          {project.description}
        </p>
        <div className="flex flex-wrap gap-2 mb-4">
          {project.technologies.map((tech) => (
            <span 
              key={tech}
              className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-sm"
            >
              {tech}
            </span>
          ))}
        </div>
        <div className="flex space-x-3">
          {project.githubUrl && (
            <a 
              href={project.githubUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-900 transition"
            >
              GitHub
            </a>
          )}
          {project.demoUrl && (
            <a 
              href={project.demoUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
            >
              Démo
            </a>
          )}
          <Link 
            href={`/projects/${project.id}`}
            className="px-4 py-2 border border-blue-600 text-blue-600 rounded-md hover:bg-blue-50 transition ml-auto"
          >
            Détails
          </Link>
        </div>
      </div>
    </div>
  );
};


Page d'accueil (src/app/page.tsx)

import Hero from '@/components/sections/Hero';
import ProjectCard from '@/components/sections/ProjectCard';
import { Project } from '@/types';

// Simulez des données (à remplacer par vos propres données)
const featuredProjects: Project[] = [
  {
    id: 'project-1',
    title: 'Application E-commerce',
    description: 'Une plateforme e-commerce complète avec panier, paiement et gestion des commandes',
    image: '/images/projects/ecommerce.jpg',
    technologies: ['React', 'Next.js', 'TypeScript', 'Tailwind CSS'],
    githubUrl: 'https://github.com/username/ecommerce',
    demoUrl: 'https://ecommerce-demo.com',
    featured: true
  },
  // Autres projets...
];

export default function Home() {
  return (
    <main>
      <Hero />
      
      <section className="py-20 bg-gray-50 dark:bg-gray-900">
        <div className="max-w-7xl mx-auto px-4">
          <h2 className="text-3xl font-bold mb-12 text-center">Projets en vedette</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {featuredProjects.map(project => (
              <ProjectCard key={project.id} project={project} />
            ))}
          </div>
          <div className="text-center mt-12">
            <a 
              href="/projects" 
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
            >
              Voir tous les projets
            </a>
          </div>
        </div>
      </section>
      
      {/* Autres sections comme Skills, Contact rapide, etc. */}
    </main>
  );
}

Page des projets (src/app/projects/page.tsx)

import ProjectCard from '@/components/sections/ProjectCard';
import { Project } from '@/types';
import { useState } from 'react';

// Simulez des données (à remplacer par vos propres données)
const allProjects: Project[] = [
  // Projets...
];

export default function ProjectsPage() {
  return (
    <div className="py-20 max-w-7xl mx-auto px-4">
      <h1 className="text-4xl font-bold mb-8">Mes projets</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {allProjects.map(project => (
          <ProjectCard key={project.id} project={project} />
        ))}
      </div>
    </div>
  );
}


export default ProjectCard;


Mise en place du layout principal

// src/app/layout.tsx
import './globals.css';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import Navbar from '@/components/ui/Navbar';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Votre Nom | Développeur Web',
  description: 'Portfolio de développement web et projets personnels',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="fr">
      <body className={inter.className}>
        <Navbar />
        <main className="pt-16">
          {children}
        </main>
        <footer className="bg-gray-800 text-white py-8">
          <div className="max-w-7xl mx-auto px-4 text-center">
            <p>© {new Date().getFullYear()} Votre Nom. Tous droits réservés.</p>
          </div>
        </footer>
      </body>
    </html>
  );
}







competences


"use client"

import { useEffect, useState } from 'react';
import { getAllSkills } from '@/lib/data';
import { Skill } from '@/types';
import { CgNpm } from 'react-icons/cg';
import Image from "next/image";

export default function SkillsPage() {
  const [skills, setSkills] = useState<Skill[]>([]);
  const [activeCategory, setActiveCategory] = useState<string>('all');
  const [loaded, setLoaded] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchSkills = async () => {
      setIsLoading(true);
      try {
        const skillsData = await getAllSkills();
        setSkills(skillsData);
      } catch (error) {
        console.error("Erreur lors du chargement des compétences:", error);
      } finally {
        setIsLoading(false);
        
        // Délai pour les animations
        setTimeout(() => {
          setLoaded(true);
        }, 100);
      }
    };

    fetchSkills();
  }, []);

  const categories = [
    { id: 'all', name: 'Toutes' },
    { id: 'frontend', name: 'Frontend' },
    { id: 'backend', name: 'Backend' },
    { id: 'tools', name: 'Outils' },
    { id: 'other', name: 'Autres' }
  ];

  const filteredSkills = activeCategory === 'all' 
    ? skills 
    : skills.filter(skill => skill.category === activeCategory);

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-pulse flex flex-col items-center">
          <div className="w-24 h-24 rounded-full bg-blue-300 mb-4"></div>
          <div className="h-8 w-64 bg-gray-300 rounded"></div>
        </div>
      </div>
    );
  }

  // Fonction pour générer la couleur du dégradé basée sur le niveau de compétence
  const getGradientColor = (proficiency: number) => {
    const colors = {
      1: 'from-blue-200 to-blue-300',
      2: 'from-blue-300 to-blue-400',
      3: 'from-blue-400 to-blue-500',
      4: 'from-blue-500 to-blue-600',
      5: 'from-blue-600 to-blue-700'
    };
    return colors[proficiency as keyof typeof colors];
  };

  // Fonction pour obtenir la largeur de la barre de progression
  const getProgressWidth = (proficiency: number) => {
    return `${proficiency * 20}%`;
  };

  // Obtenez l'icône appropriée pour la compétence
  const getSkillIcon = (iconName: string) => {
    try {
        const iconMap: Record<string, string> = {
      html5: '/images/skills/html.png',
      css3: '/images/skills/css.png',
      javascript: '/images/skills/js.png',
      typescript: '/images/skills/typescript.svg',
      react: '/images/skills/react.png',
      nextjs: '/images/skills/next-js.webp',
      vuejs: '/images/skills/vuejs.jpg',
      tailwind: '/images/skills/tailwind.png',
      nodejs: '/images/skills/node-js.png',
      php: '/images/skills/php.jpg',
      python: '/images/skills/python.jpg',
      laravel: '/images/skills/laravel.jpg',
      flask: '/images/skills/flask.jpg',
      nestjs: '/images/skills/nest.jpg',
      mysql: '/images/skills/mysql.jpg',
      mongodb: '/images/skills/mongo.jpg',
      sqlite: '/images/skills/sqlite.jpg',
      git: '/images/skills/git.jpg',
      docker: '/images/skills/docker.jpg',
      figma: '/images/skills/figma.jpg',
      vscode: '/images/skills/vscode.jpg',
    };
    
    // Vérifie si l'icône existe dans la map, sinon retourne l'icône par défaut
    return iconMap[iconName] ? iconMap[iconName] : '/images/skills/default.svg';
  } catch (error) {
    console.error("Erreur lors du chargement de l'icône:", error);
    return '/images/skills/default.svg';
  }
};

  return (
    <div className="min-h-screen pb-20 bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50 dark:from-black dark:via-blue-900 dark:to-purple-900">
      <div className="max-w-7xl mx-auto px-4 pt-28">
    
        <div className={`transition-all duration-700 ${loaded ? 'opacity-100' : 'opacity-0 transform -translate-y-4'}`}>
          <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Mes compétences
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-300 mb-12 max-w-3xl">
            Voici un aperçu des technologies et outils que j'utilise pour créer des applications web modernes et performantes.
          </p>
        </div>

        {/* Filtres de catégories */}
        <div className={`flex flex-wrap gap-3 mb-12 transition-all duration-1000 delay-300 ${loaded ? 'opacity-100' : 'opacity-0'}`}>
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => setActiveCategory(category.id)}
              className={`px-5 py-2 rounded-full transition-all ${
                activeCategory === category.id
                  ? 'bg-blue-600 text-white shadow-md'
                  : 'bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              {category.name}
            </button>
          ))}
        </div>

        {/* Grille de compétences */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
          {filteredSkills.map((skill, index) => (
            <div 
              key={skill.name}
              className={`bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden transition-all duration-700 hover:shadow-xl transform hover:-translate-y-1 ${
                loaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
              }`}
              style={{ transitionDelay: `${index * 50}ms` }}
            >
              <div className="p-6">
                <div className="flex items-center mb-4">
                  <div className="w-12 h-12 mr-4 flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-lg">
                    <img 
                      src={getSkillIcon(skill.icon)}
                      alt={skill.name}
                      className="w-8 h-8"
                      onError={(e) => {
                        // Fallback si l'image ne charge pas
                        const target = e.target as HTMLImageElement;
                        target.src = '/images/skills/default.svg';
                      }}
                    />
                  </div>
                  <div>
                    <h3 className="font-bold text-xl">{skill.name}</h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400 capitalize">
                      {skill.category}
                    </p>
                  </div>
                </div>

                {/* Barre de progression */}
                <div className="mt-4">
                  <div className="flex justify-between mb-1">
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Niveau</span>
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">{skill.proficiency}/5</span>
                  </div>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 overflow-hidden">
                    <div 
                      className={`h-2.5 rounded-full bg-gradient-to-r ${getGradientColor(skill.proficiency)} transition-all duration-1000`}
                      style={{ 
                        width: loaded ? getProgressWidth(skill.proficiency) : '0%'
                      }}
                    ></div>
                  </div>
                </div>

                {/* Étoiles pour le niveau (alternative visuelle) */}
                <div className="flex mt-3">
                  {[...Array(5)].map((_, i) => (
                    <svg 
                      key={i} 
                      className={`w-5 h-5 ${i < skill.proficiency ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}`} 
                      fill="currentColor" 
                      viewBox="0 0 20 20"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                    </svg>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Section supplémentaire pour les statistiques */}
        <div className={`mt-20 py-12 px-8 bg-white dark:bg-black rounded-xl shadow-lg transition-all duration-1200 delay-500 ${
          loaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
        }`}>
          <h2 className="text-3xl font-bold mb-8 text-center">Statistiques de compétences</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900 dark:to-blue-800 p-6 rounded-lg text-center">
              <h3 className="text-xl font-semibold mb-2">Frontend</h3>
              <div className="text-4xl font-bold text-blue-600 dark:text-blue-400">
                {skills.filter(s => s.category === 'frontend').length}
              </div>
              <p className="text-gray-600 dark:text-gray-300 mt-2">technologies</p>
            </div>
            
            <div className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900 dark:to-purple-800 p-6 rounded-lg text-center">
              <h3 className="text-xl font-semibold mb-2">Backend</h3>
              <div className="text-4xl font-bold text-purple-600 dark:text-purple-400">
                {skills.filter(s => s.category === 'backend').length}
              </div>
              <p className="text-gray-600 dark:text-gray-300 mt-2">technologies</p>
            </div>
            
            <div className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900 dark:to-green-800 p-6 rounded-lg text-center">
              <h3 className="text-xl font-semibold mb-2">Niveau moyen</h3>
              <div className="text-4xl font-bold text-green-600 dark:text-green-400">
                {(skills.reduce((acc, curr) => acc + curr.proficiency, 0) / skills.length).toFixed(1)}
              </div>
              <p className="text-gray-600 dark:text-gray-300 mt-2">sur 5</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

